//package main
//
//import (
//	"errors"
//	"flag"
//	"fmt"
//	"github.com/atotto/clipboard"
//	"jiraEnrich/internal/jira"
//	"jiraEnrich/internal/lineParser"
//	"log"
//	"os"
//	"strings"
//	"time"
//)
//
//type flags struct {
//	Lines string
//}
//
//func getFlags() flags {
//	keyString := flag.String("keys", "JIRA-100", "List of jira tasks separated by newline character")
//
//	flag.Parse()
//	return flags{*keyString}
//}
//
//func getResult(issues []jira.issueResponse, enrichedFlags []string) string {
//	var result []string
//	result = append(result, getDay())
//	for i, issue := range issues {
//		result = append(result, fmt.Sprintf("%s %s: %s", enrichedFlags[i], issue.Key, issue.Fields.Summary))
//	}
//	return strings.Join(result, "\n")
//}
//
//func getKeys(lines []lineParser.Line) []string {
//	var keys []string
//	for _, line := range lines {
//		keys = append(keys, line.Key)
//	}
//
//	return keys
//}
//
//func getEnrichedFlags(lines []lineParser.Line) []string {
//	var keys []string
//	for _, line := range lines {
//		keys = append(keys, line.GetEnrichedFlags())
//	}
//
//	return keys
//}
//
//func getDay() string {
//	return fmt.Sprintf("`%s`", time.Now().Weekday().String())
//}
//
//func handleArgs() {
//	args := os.Args
//	if len(args) < 2 {
//		//"./jira issue enrich keys"
//		//"./jira issue search query"
//	}
//}
//
//func main() {
//	f := getFlags()
//	j := jira.Client{BaseUrl: os.Getenv("JIRA_BASE_URL"), Username: os.Getenv("JIRA_USERNAME"), Password: os.Getenv("JIRA_PASSWORD")}
//
//	if len(os.Args) < 2 {
//		errors.New("missing subcommand")
//	}
//
//	issueCmd := flag.NewFlagSet("issue", flag.ExitOnError)
//	issue
//	switch os.Args[1] {
//	case "issue":
//		f
//	default:
//		errors.New("invalid subcommand")
//	}
//
//	lines := strings.Split(f.Lines, "\n")
//	parsedLines := lineParser.ParseLines(lines)
//
//	keys := getKeys(parsedLines)
//	enrichedFlags := getEnrichedFlags(parsedLines)
//
//	issues := j.GetIssues(keys)
//	result := getResult(issues, enrichedFlags)
//	err := clipboard.WriteAll(result)
//	if err != nil {
//		log.Fatal(err)
//	}
//}
